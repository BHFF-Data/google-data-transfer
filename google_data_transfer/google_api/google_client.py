from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build as build_google_service
from httplib2 import Http

DISCOVERY_DOC_FORM = "https://forms.googleapis.com/$discovery/rest?version=v1"
DISCOVERY_DOC_SHEET = "https://sheets.googleapis.com/$discovery/rest?version=v4"


class GoogleClient:
    """A class to represent a connection to Google.

    Attributes:
        creds : credentials to use for the connection

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    def __init__(self, creds: Credentials):
        """Args:
        creds: The credentials to use for the connection.

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        self.creds = creds


class GoogleFormsClient(GoogleClient):
    """A class to represent a Google Forms connection.

    Attributes:
        creds : Google credentials
        service : Google Forms service

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    def __init__(self, creds: Credentials):
        """
        Args:
            creds: Credentials


        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        super().__init__(creds)
        http = creds.authorize(Http())
        self.service = build_google_service('forms', 'v1', http=http, discoveryServiceUrl=DISCOVERY_DOC_FORM,
                                            static_discovery=False, )

    def fetch_form_responses(self, form_id: str) -> dict:
        """Fetch form responses from Google Forms.

        Args:
            form_id: The id of the form

        Returns:
            A dictionary containing the form responses.

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        result = self.service.forms().responses().list(formId=form_id).execute()
        return result

    def fetch_form_contents_metadata(self, form_id: str) -> dict:
        """Fetch the metadata of a form.

        Args:
            form_id: The id of the form.

        Returns:
            The metadata of the form.

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        result = self.service.forms().get(formId=form_id).execute()
        return result


class GoogleSheetsClient(GoogleClient):
    """A class to represent a connection to Google Sheets.

    Attributes:
        creds : credentials to access Google Sheets
        service : Google Sheets service

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    def __init__(self, creds: Credentials):
        """Initialize the GoogleSheets class.

        Args:
            creds: The credentials object

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        super().__init__(creds)
        http = creds.authorize(Http())
        self.service = build_google_service('sheets', 'v4', http=http, discoveryServiceUrl=DISCOVERY_DOC_SHEET,
                                            static_discovery=False)

    def fetch_sheet_contents(self, sheet_id: str, sheet_name: str) -> list[list]:
        """Fetch the contents of a Google Sheet.

        Args:
            sheet_id: The id of the Google Sheet
            sheet_name: The name of the sheet within the Google Sheet

        Returns:
            The contents of the sheet as a list of lists

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        sheet = self.service.spreadsheets()
        result = sheet.values().get(spreadsheetId=sheet_id, range=sheet_name).execute()
        values = result.get("values", [])
        return values

    def write_sheet_row(self):
        """Write a row to the sheet

        Args:
            sheet: The sheet to write to
            row: The row to write
            row_number: The row number to write to

        Returns:
            The row number written to

        Raises:
            ValueError: If sheet is None

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        ...
