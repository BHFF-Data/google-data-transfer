import pickle
from dataclasses import dataclass
from pathlib import Path
from typing import Callable

import pandas as pd
from google_data_transfer.commons import PathType


def make_config_id(name: str) -> str:
    """Make a config id from a name.

    Args:
        name: The name to convert

    Returns:
        The config id

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """
    return name.lower().replace(" ", "_")


@dataclass
class TransferConfig:
    """A class to represent a transfer configuration.

    Attributes:
        columns_join_map : a dictionary mapping the column names of the source dataframe to the column names of the target dataframe
        target_col : the name of the target column
        name : the name of the transfer configuration
        transfer_function : the transfer function
        _id : the id of the transfer configuration

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
    """

    TransferFunctionType = Callable[[pd.DataFrame], pd.DataFrame]
    columns_join_map: dict[str:str]
    target_col: str
    name: str
    transfer_function: TransferFunctionType
    _id: str

    def __init__(
        self,
        columns_join_map: dict[str:str],
        target_col: str,
        name: str,
        transfer_function: TransferFunctionType,
    ):
        """A class to represent a person.

        Attributes:
            columns_join_map : a dictionary mapping the columns to join
            target_col : the target column
            name : the name of the person
            transfer_function : the transfer function

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        self.columns_join_map = columns_join_map
        self.target_col = target_col
        self.name = name
        self.transfer_function = transfer_function
        self._id = make_config_id(name)

    def to_pickle(self, config_dir_path: PathType) -> None:
        """
        Args:
            config_dir_path: The path to the directory where the pickle file will be saved

        Returns:
            None

        Raises:
            None

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        pickled_name = self._id + ".pickle"
        pickled_path = Path(config_dir_path) / pickled_name
        with open(pickled_path, "wb") as file:
            pickle.dump(self, file)

    @classmethod
    def from_pickle(cls, pickled_path: PathType):
        """    Load a configuration from a pickle file.

        Args:
            pickled_path: Path to the pickle file.

        Returns:
            The configuration.

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        with open(pickled_path, "rb") as file:
            config = pickle.load(file)
        return config
