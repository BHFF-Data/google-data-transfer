from typing import Optional

import pandas as pd

from google_data_transfer.commons import FORM_RESPONDENT_EMAIL_COL
from google_data_transfer.google_api.form import Form
from google_data_transfer.google_api.sheet import GoogleSpreadSheet, Worksheet
from google_data_transfer.transfer_configs.transfer_config import TransferConfig

KNOWLEDGE_BASE_EMAIL_COL = "Mentee email"

ACTIVITY_QUESTION = "Do you have recommended number of meetings with your mentor?"
INACTIVITY_REASON_QUESTION = (
    "If the answer to the previous question is 'No', please state why"
)

INACTIVITY_VALUE = "Inactive"
ACTIVITY_MAP = {"Yes": "Active", "No": INACTIVITY_VALUE}
INACTIVITY_MAP = {
    "I wasn't available for my mentor": "Inactive due to mentee",
    "My Mentor wasn't available for me": "Inactive due to mentor",
}

FORM_KEY = FORM_RESPONDENT_EMAIL_COL
WORKSHEET_TO_KNOWLEDGE_BASE_KEYS_MAP = {
    "Mentor": "Mentor Name",
    "Mentee": "Mentee Name",
}
TARGET_COL = "Status - January 2023"
DEFAULT_NAME = "Mentoring Reports Default"
MISSING_FILL_VALUE = "Unknown (report is missing)"

WORKSHEET_TO_KNOWLEDGE_BASE_NAME_MAP = {
    "Tracking Juniors": "Junior Scholars",
    "Tracking Seniors": "Senior Scholars",
}


class MentoringReportsTransferConfig(TransferConfig):
    def __init__(
            self,
            form_key: str = FORM_KEY,
            worksheet_to_knowledge_base_keys_map: dict | None = None,
            worksheet_to_knowledge_base_name_map: dict | None = None,
            target_col: Optional[str] = None,
            name: str = DEFAULT_NAME,
            missing_fill_value: str = MISSING_FILL_VALUE,
            knowledge_base_email_col: str = KNOWLEDGE_BASE_EMAIL_COL,
    ):
        if worksheet_to_knowledge_base_keys_map is None:
            worksheet_to_knowledge_base_keys_map = WORKSHEET_TO_KNOWLEDGE_BASE_KEYS_MAP
        if worksheet_to_knowledge_base_name_map is None:
            worksheet_to_knowledge_base_name_map = WORKSHEET_TO_KNOWLEDGE_BASE_NAME_MAP
        sheet_key = list(worksheet_to_knowledge_base_keys_map.keys())
        knowledge_base_key = list(worksheet_to_knowledge_base_keys_map.values())

        if target_col is None:
            self.target_col = TARGET_COL
        super().__init__([form_key], sheet_key, target_col, name, missing_fill_value)
        self._worksheet_to_knowledge_base_keys_map = (
            worksheet_to_knowledge_base_keys_map
        )
        self._worksheet_to_knowledge_base_name_map = (
            worksheet_to_knowledge_base_name_map
        )
        self._knowledge_base_key = knowledge_base_key
        self._knowledge_base_email_col = knowledge_base_email_col

    def transfer(
            self,
            form_df: pd.DataFrame,
            activity_question: str = ACTIVITY_QUESTION,
            activity_response_map: Optional[dict[str, str]] = None,
            inactivity_question: str = INACTIVITY_REASON_QUESTION,
            inactivity_response_map: Optional[dict[str, str]] = None,
            inactivity_value: str = INACTIVITY_VALUE,
    ) -> pd.DataFrame:
        """Compute the activity column

        Args:
            form_df: The dataframe
            activity_question: The activity question
            activity_response_map: The activity response map
            inactivity_question: The inactivity question
            inactivity_response_map: The inactivity response map
            inactivity_value: The inactivity value

        Returns:
            The dataframe with the activity column

        !!! note

            The above docstring is autogenerated by docstring-gen library (https://docstring-gen.airt.ai)
        """
        if activity_response_map is None:
            activity_response_map = ACTIVITY_MAP
        if inactivity_response_map is None:
            inactivity_response_map = INACTIVITY_MAP
        df = form_df
        df[activity_question] = df[activity_question].replace(activity_response_map)

        if inactivity_question in form_df.columns:
            df[inactivity_question] = df[inactivity_question].replace(
                inactivity_response_map
            )
            df.loc[
                df[activity_question] == inactivity_value, activity_question
            ] = df.loc[df[activity_question] == inactivity_value, inactivity_question]

        form_cols = self.form_key + [activity_question]
        df = df[form_cols]
        df = df.rename(columns={activity_question: "target"})
        return df

    def match_rows(
            self, form: Form, sheet: GoogleSpreadSheet, worksheet: Worksheet
    ) -> dict:
        # For every (mentee, mentor) pair, find email address
        knowledge_base_name = self._worksheet_to_knowledge_base_name_map[worksheet.name]
        knowledge_base = sheet.get_worksheet(knowledge_base_name)
        knowledge_base_df = knowledge_base.to_df()
        worksheet_df = worksheet.to_df()
        joined_df = pd.merge(
            worksheet_df,
            knowledge_base_df,
            left_on=self.sheet_key,
            right_on=self._knowledge_base_key,
            how="inner",
        )
        result_cols = list(self.sheet_key) + [self._knowledge_base_email_col]
        worksheet_key_and_email_df = joined_df[result_cols]
        # Check which email addresses were in the form responses
        form_df = form.to_df()
        final_df = pd.merge(
            worksheet_key_and_email_df,
            form_df,
            left_on=self._knowledge_base_email_col,
            right_on=self.form_key,
            how="inner",
        )
        final_cols = list(self.sheet_key) + list(self.form_key)
        final_df = final_df[final_cols]
        result_dict = (
            final_df.set_index(self.sheet_key)[self.form_key]
            .apply(tuple, axis=1)
            .to_dict()
        )
        return result_dict
